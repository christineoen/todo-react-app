import React, { Component } from 'react';import {render} from 'react-dom';import KanbanBoard from './KanbanBoard';import update from 'react-addons-update';import 'whatwg-fetch'import 'babel-polyfill'const API_URL = 'http://kanbanapi.pro-react.com';const API_HEADERS = {  'Content-Type': 'application/json',  Authorization: 'authorization-string'};class KanbanBoardContainer extends Component {  constructor(){    super(...arguments);    this.state = {      cards:[]    };  }  componentDidMount(){    fetch(API_URL+'/cards', {headers: API_HEADERS})    .then((response) => response.json())    .then((responseData) => {      this.setState({cards: responseData});    })    .catch((error) => {      console.log('Error fetching and parsing data', error);    });  }  addTask(cardId, taskName){    // Keep a reference to the original state prior to the mutations    // in case you need to revert the optimistic changes in the UI    let prevState = this.state;    // Find the index of the card    let cardIndex = this.state.cards.findIndex((card)=>card.id == cardId);    // Create a new task with the given name and a temporary ID    let newTask = {id:Date.now(), name:taskName, done:false};    // Create a new object and push the new task to the array of tasks    let nextState = update(this.state.cards, {      [cardIndex]: {        tasks: {$push: [newTask] }      }    });    // set the component state to the mutated object    this.setState({cards:nextState});    // Call the API to add the task on the server    fetch(`${API_URL}/cards/${cardId}/tasks`, {      method: 'post',      headers: API_HEADERS,      body: JSON.stringify(newTask)    })    .then((response) => {      if(response.ok){        return response.json()      } else {        // Throw an error if server response wasn't ok        throw new Error("Server response wasn't OK");      }    })    .then((responseData) => {      // When the server returns the definitive ID      // use for the new Task on the server, update it on React      newTask.id=responseData.id      this.setState({cards:nextState});    })    .catch((error) => {      this.setState(prevState);    });  }  deleteTask(cardId, taskId, taskIndex){    // Keep a reference to the original state prior to the mutations    // in case you need to revert the optimistic changes in the UI    let prevState = this.state;    // find the index of the card    let cardIndex = this.state.cards.findIndex((card)=>card.id == cardId);    // create a new object without the task    let nextState = update(this.state.cards, {      [cardIndex]: {        tasks: {$splice: [[taskIndex,1]] }      }    });    // set the component state to the mutated object    this.setState({cards:nextState});    // call the API to remove the task on the server    fetch(`${API_URL}/cards/${cardId}/tasks/${taskId}`, {      method: 'delete',      headers: API_HEADERS    })    .then((response) => {      if(!response.ok){        // Throw an error if server response wasn't ok        // so you can revert back the optimistic changes        // made to the UI        throw new Error("Server response wasn't OK");      }    })    .catch((error) => {      console.error("Fetch error:", error)      this.setState(prevState);    });  }  toggleTask(cardId, taskId, taskIndex){    // Keep a reference to the original state prior to the mutations    // in case you need to revert the optimistic changes in the UI    let prevState = this.state;    // find the index of the card    let cardIndex = this.state.cards.findIndex((card)=>card.id == cardId);    // save a reference to the task's 'done' value    let newDoneValue;    // using the $apply command, you will change the done value to its opposite    let nextState = update(this.state.cards, {      [cardIndex]: {        tasks: {          [taskIndex]: {            done: { $apply: (done) => {              newDoneValue = !done              return newDoneValue;              }            }          }        }      }    });    // set the component state to the mutated object    this.setState({cards:nextState});    // Call the API to toggle the task on the server    fetch(`${API_URL}/cards/${cardId}/tasks/${taskId}`, {      method: 'put',      headers: API_HEADERS,      body: JSON.stringify({done:newDoneValue})    })    .then((response) => {      if(!response.ok){        // Throw an error if server response wasn't ok        // so you can revert back the optimistic changes        // made to the UI        throw new Error("Server response wasn't OK");      }    })    .catch((error) => {      console.error("Fetch error:", error)      this.setState(prevState);    });  }  render() {    return (      <KanbanBoard cards={this.state.cards}                   taskCallbacks={{                      toggle: this.toggleTask.bind(this),                      delete: this.deleteTask.bind(this),                      add: this.addTask.bind(this) }}/>   )  }}export default KanbanBoardContainer;class App extends Component {  render(){    var place = "World";    return (      <h1>Hello {place}</h1>    );  }}class GroceryList extends Component {  render() {    return(      <ul>        <ListItem quantity="1" name="Bread" />        <ListItem quantity="6" name="Eggs" />        <ListItem quantity="2" name="Milk" />      </ul>    );  }}class ListItem extends Component {  render() {    return(      <li>        {this.props.quantity}x {this.props.name}      </li>    );  }}let cardsList = [  {    id: 1,    title: "Read the Book",    description: "I should read the **whole** book",    color: "#BD8D31",    status: "in-progress",    tasks: []  },  {    id: 2,    title: "write some code",    description: "Code along with the samples in the book. The complete source can be found at [github](https://github.com/pro-react)",    status: "todo",    color: "#3A7E28",    tasks: [      {        id: 1,        name: "ContactList Example",        done: true      },      {        id: 2,        name: "KanBan Example",        done: false      },      {        id: 3,        name: "My own experiments",        done: false      }    ]  },  {    id: 3,    title: "Title 3",    description: "I should read the **whole** book",    color: "#BD8D31",    status: "done",    tasks: []  }];render(<KanbanBoardContainer />, document.getElementById('root'));// render(<KanbanBoard cards={cardsList} />, document.getElementById('root'));// render(<GroceryList />, document.getElementById("root"));// render(<App />, document.getElementById('root'));